Architecture Flags:
===================

The "Scout" project uses many configuration switches, implemented as C code macros (defines). These switches allow the project to be configurable for many different use cases, with (hopefully) minimal code duplication.

Here is a full explanation for each of the configurations flags:

Target Endianness:
------------------
* SCOUT_BIG_ENDIAN - Means that the scout is executed on a Big Endian architecture
* SCOUT_LITTLE_ENDIAN - Means that the scout is executed on a Little Endian architecture

Only one of above flags can be defined.
If none are defined the base library will define "SCOUT_LITTLE_ENDIAN" on it's own.

Target Bitness:
---------------
* SCOUT_BITS_32 - Means that the scout is executed on a 32 bit machine
* SCOUT_BITS_64 - Means that the scout is executed on a 64 bit machine

Only one of above flags can be defined.
If none are defined the base library will define "SCOUT_BITS_32" on it's own.

Target CPU Architecture:
------------------------
* SCOUT_ARCH_INTEL - Means that the scout is executed on an Intel (x86 \ x64) CPU
* SCOUT_ARCH_ARM - Means that the scout is executed on an ARM (maybe thumb mode) CPU

Only one of above flags can be defined.
If none are defined the base library will define "SCOUT_ARCH_INTEL" on it's own.

Target Permission Level:
------------------------
* SCOUT_MODE_USER - Means that the scout is executed in User-Mode
* SCOUT_MODE_KERNEL - Means that the scout is executed in Kernel-Mode

Only one of above flags can be defined.
If none are defined the base library will define "SCOUT_MODE_USER" on it's own.

Note: these flags are used only in a Linux PC Environment, and are not used in an Embedded Environment.

Target Loading Environment:
---------------------------
* SCOUT_PC_ENV - Means that the scout is executed as a standard process (user) or driver (kernel) on a Linux machine
* SCOUT_EMBEDDED_ENV - Means that the scout is injected to the address space of a given executable

Only one of above flags can be defined.
If none are defined the base library will define "SCOUT_PC_ENV" on it's own.

Note: SCOUT_EMBEDDED_ENV has many use cases, including:
1. Injecting a debugger into a debuggee Linux process
2. Injecting a debugger into a debuggee firmware (if the executable's API matches the basic POSIX based API of Scout)

Note: Currently "SCOUT_EMBEDDED_ENV" must be used with "SCOUT_PIC_CODE", although in the future a linker script could help an embedded scout access external functions without the PIC context.

Additional Flags - SCOUT_PIC_CODE:
----------------------------------
Scout will be compiled for full Position Independent Code (PIC) mode. Any access to an external function / global variable will pass through a unique "Context" object. Read the tutorial about PIC compilation for more information.
Note: Can only be used with "SCOUT_EMBEDDED_ENV".

Additional Flags - SCOUT_ARM_THUMB:
-----------------------------------
Meaning that scout will be executed on an ARM cpu in Thumb mode. This flag will be used only in PIC mode, in which we use inline assembly.

Additional Flags:
-----------------
* SCOUT_INSTRUCTIONS - Scout is going to use the instructions api (using the tcp server for instance)
* SCOUT_DYNAMIC_BUFFERS - Scout will dynamically malloc() buffers to be used by the tcp server. Otherwise static buffers will be used.
* SCOUT_PROXY - Scout is going to act as a proxy (user scout passing instructions to a kernel driver for instance)
* SCOUT_MMAP - Should scout's loaders use mmap() and mprotect() when loading (if defined) or should they simply use malloc (if undefined)

Additional Flags - SCOUT_RESTORE_FLOW:
--------------------------------------
Meaning that the default loaders (tcp_client_server.c, tcp_loader_server.c) will clean-up after themselves if the loaded scout will finish his endless loop.
